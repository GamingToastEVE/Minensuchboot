

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
//import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.Timer;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author michael
 */
public class zeichenFormular extends javax.swing.JFrame {



    /**
     * Creates new form zeichenFormular
     */
    
    
    private Point maus;
    int zaehler = 0;
    int x1 = 0;
    int y1 = 0;
    int x2 = 0;
    int y2 = 0;
    int firstClick = 0;
    int minesLeft;
    int count = 0;
    boolean uLost;
    public static long startTime = 0;
    public static int time;
    Timer timer;
    boolean uWon;
    int winCount;
    int minesCOUNT;
    int progress;
    int percent;
    String username;
    //long startTime;
    
    
    
    public zeichenFormular() {
        initComponents();
        timer = new Timer(1000,evt -> updateTimer(evt));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        endeButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        zeichenPanel1 = new zeichenPanel();
        mineCount = new javax.swing.JTextField();
        timerLabel = new javax.swing.JLabel();
        timerCountLabel = new javax.swing.JLabel();
        mineCountLabel = new javax.swing.JLabel();
        bombsLeftLabel = new javax.swing.JLabel();
        bombsLeftCount = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Minensuchboot");

        endeButton.setText("Beenden");
        endeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                endeButtonMouseClicked(evt);
            }
        });

        jButton1.setText("Säubern");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        zeichenPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zeichenPanel1MouseClicked(evt);
            }
        });

        mineCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mineCountActionPerformed(evt);
            }
        });

        timerLabel.setText("Timer:");

        timerCountLabel.setLabelFor(timerLabel);
        timerCountLabel.setText("0:00");

        mineCountLabel.setText("Anzahl Minen:");

        bombsLeftLabel.setText("Bomben übrig:");

        bombsLeftCount.setText("x");

        progressBar.setForeground(new java.awt.Color(0, 0, 255));
        progressBar.setStringPainted(true);

        jLabel1.setText("Fortschritt:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(endeButton)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zeichenPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bombsLeftLabel)
                                    .addComponent(timerLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bombsLeftCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(112, 112, 112))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(timerCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(mineCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mineCount, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(zeichenPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mineCount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mineCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timerCountLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bombsLeftLabel)
                            .addComponent(bombsLeftCount))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endeButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void endeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endeButtonMouseClicked
        int antwort = JOptionPane.showConfirmDialog(null, "Wollen Sie wirklich beenden?", "Bestätigen",
                                                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (antwort == JOptionPane.YES_OPTION)
            System.exit(0);
    }//GEN-LAST:event_endeButtonMouseClicked

    private void zeichenPanel1MouseClicked(MouseEvent evt) {//GEN-FIRST:event_zeichenPanel1MouseClicked
        if (evt.getButton() == evt.BUTTON1) {
            int x = evt.getX();
            int y = evt.getY();
            int xFeld = y/22;
            int yFeld = x/22;
            if(firstClick == 0){
                firstClick += 1;
                progress = 0;
                percent = 0;
                startGame(xFeld, yFeld, evt);
                System.out.println("hint");
            }
            if(System.getProperty("user.name").equals("michael") || System.getProperty("user.name").equals("maront")){
                if(progress > 400-minesCOUNT-20){
                    zeichenPanel1.feld[xFeld][yFeld] = 9;
                }
            }
               // zeichenPanel1.feld [xFeld] [yFeld] = Color.BLACK;
            if(zeichenPanel1.feld [xFeld][yFeld] == 10){
                revealIte(xFeld,yFeld);
            }else if(zeichenPanel1.feld [xFeld][yFeld] > 10 && zeichenPanel1.feld [xFeld][yFeld] < 19){
                //zeichenPanel1.feld[xFeld][yFeld] = zeichenPanel1.feld[xFeld][yFeld] - 10;
                revealIte(xFeld,yFeld);
                
            }else if(zeichenPanel1.feld[xFeld][yFeld] == 9){
                for(int i = 0; i<20; i++) {
                    for(int j=0; j<20; j++) {
                        if(zeichenPanel1.feld[i][j] == 9){
                            zeichenPanel1.feld[i][j] = zeichenPanel1.feld[i][j] - 10;
                        }else{
                            zeichenPanel1.feld[i][j] = 0;
                        }
                    }
                }
                timer.stop();
                /*time = (int)(evt.getWhen() - startTime);
                int minutes = (time/1000/60);
                int seconds = (time/1000%60);*/
                JOptionPane.showMessageDialog(null, "Never gonna give you up! Never gonna let you down! Im Spiel verbrachte Zeit: " + timerCountLabel.getText() + ".");
                uLost = true;
            }
            
            
            winCount = 0;
            
        username = System.getProperty("user.name");
        System.out.println(username);
        if(System.getProperty("user.name").equals("maront")){
            System.out.println("Wurscht");
        }
            
        for(int i = 0; i<20; i++) {
            for(int j=0; j<20; j++) {
                if(zeichenPanel1.feld[i][j] == 19){
                    winCount +=1;
                }
                if(winCount == minesCOUNT){
                    timer.stop();
                    JOptionPane.showMessageDialog(null, "Du hast gewonnen! Im Spiel verbrachte Zeit: " + timerCountLabel.getText() + ".");
                    uWon = true;
                    
                }
            }
        }        
                
            

            System.out.println("x="+xFeld+", y="+yFeld);
            System.out.println(zeichenPanel1.feld [xFeld][yFeld]);
        } 
        if (evt.getButton() == evt.BUTTON3){
            
            int x = evt.getX();
            int y = evt.getY();
            int xFeld = y/22;
            int yFeld = x/22;
            if(zeichenPanel1.feld [xFeld][yFeld] >= 9 && zeichenPanel1.feld [xFeld][yFeld] < 19){
                System.out.println(zeichenPanel1.feld[xFeld][yFeld]);
                zeichenPanel1.feld [xFeld][yFeld] = zeichenPanel1.feld [xFeld][yFeld] + 10;
                System.out.println(zeichenPanel1.feld[xFeld][yFeld]);
                minesLeft = minesLeft - 1;
                bombsLeftCount.setText(Integer.toString(minesLeft));
            }else if(zeichenPanel1.feld [xFeld][yFeld] >= 19 && zeichenPanel1.feld [xFeld][yFeld] < 29){
                zeichenPanel1.feld [xFeld][yFeld] = zeichenPanel1.feld [xFeld][yFeld] - 10;
                minesLeft = minesLeft + 1;
                bombsLeftCount.setText(Integer.toString(minesLeft));
            }
            winCount = 0;
            
            /*for(int i = 0; i<20; i++) {
                for(int j=0; j<20; j++) {
                    if(zeichenPanel1.feld[i][j] == 19){
                        winCount = winCount + 1;
                        System.out.println("Wincount: " + winCount);
                        System.out.println("Minescount: " + minesCOUNT);
                    }
                }
            }
            if(winCount == minesCOUNT){
                System.out.println("Wincount: " + winCount);
                System.out.println("Minescount: " + minesCOUNT+1);
                JOptionPane.showMessageDialog(null, "Du hast gewonnen! Im Spiel verbrachte Zeit: " + timerCountLabel.getText() + ".");
                timer.stop();
                uWon = true;
            }*/
        } 
        /*if(evt.getButton() == evt.BUTTON3){
            Point test = evt.getPoint();

            switch(zaehler){
                case 0:
                    x1 = (int) (test.getY()/22);
                    y1 = (int) (test.getX()/22);
                    zaehler = 1;
                    break;
                case 1:
                    x2 = (int) (test.getY()/22);
                    y2 = (int) (test.getX()/22);
                    zaehler = 0;
                    System.out.println(x1 + ", " + y1 + ", " + x2 + ", " + y2);
                    drawLine(x1, y1, x2, y2);
                    break;
                default:
                    break;
            }
        }*/
    }//GEN-LAST:event_zeichenPanel1MouseClicked
    
    
    
    private void revealIte(int xFeld, int yFeld){
        ArrayList<int[]> opener = new ArrayList<>();
        opener.add(new int [] {xFeld, yFeld});
        while(opener.size() > 0){
            for(int i = opener.get(0)[0] -1; i <= opener.get(0)[0] +1; i++){
                for(int j = opener.get(0)[1] -1; j <= opener.get(0)[1] +1; j++){
                    if(i <= 19 && i >= 0 && j >= 0 && j <= 19 && zeichenPanel1.feld [i][j] > 9 && zeichenPanel1.feld [i][j] < 19){
                        System.out.println("funktioniert");
                        if(zeichenPanel1.feld[i][j] == 10){
                            System.out.println("ich auch!");
                            opener.add(new int[] {i,j});
                            System.out.println(opener.get(1)[0] + ", " + opener.get(1)[1]);
                        }
                        zeichenPanel1.feld[i][j] = zeichenPanel1.feld[i][j] - 10;
                        progress +=1;
                        System.out.println("Hey: " + progress);
                        percent = 100 * progress/(400-minesCOUNT);
                        System.out.println("Minen: " + minesCOUNT);
                        System.out.println("Prozent: " + percent);
                        System.out.println("rechnung: " + 100 * progress/(400-minesCOUNT));
                        progressBar.setValue(percent);
                        System.out.println("Value: " + progressBar.getValue());
                    }
                }
            }
            opener.remove(0);
        }
    }
    
    
    
    private void startGame(int xFeld,int yFeld,MouseEvent evt){
        winCount = 0;
        String mines1 = mineCount.getText();
        int mines = Integer.parseInt(mines1);
        minesLeft = mines;
        bombsLeftCount.setText(Integer.toString(minesLeft));
        minesCOUNT = Integer.parseInt(mineCount.getText());
        progress = 0;
        System.out.println(minesCOUNT);
        if(mines > 1 && mines < 300){
            for(int i=0; i<20; i++) {
                for(int j=0; j<20; j++) {
                zeichenPanel1.feld [i][j] = 10;
                } 
            }
        
            while(mines > 0){
                int mineX = (int)(Math.random()*20);
                int mineY = (int)(Math.random()*20);
            
                if(zeichenPanel1.feld [mineY][mineX] != 9 && mineX != yFeld && mineY != xFeld){
                    zeichenPanel1.feld [mineY][mineX] = 9;
                    mines -=1;
                    for(int j = (mineY-1); j <= (mineY+1); j++){
                        for(int k = (mineX-1); k <= (mineX+1); k++){
                            if(k>=0 && k<20 && j>=0 && j<20 && zeichenPanel1.feld [j][k] != 9){
                                zeichenPanel1.feld [j][k] = zeichenPanel1.feld [j][k] + 1;
                            }
                        }
                    }
                }
            }
        }else{
            mineCountLabel.setText("Zahl zwischen 2 und 299!");
        }
        startTime = 0;
        timer.restart();
    }
    
    
    
    public static void updateTimer(ActionEvent evt){
        if(startTime == 0){
            startTime = evt.getWhen();
        }
        time = (int)(evt.getWhen() - startTime);
        int minutes = (time/1000/60);
        int seconds = (time/1000%60);
        timerCountLabel.setText(minutes + ":" + seconds);
    }
    
    
    
    private void reveal(int xFeld, int yFeld){
        if(xFeld >= 0 && xFeld < 20 && yFeld >= 0 && yFeld < 20){
            if(zeichenPanel1.feld[xFeld][yFeld] == 10){
               zeichenPanel1.feld[xFeld][yFeld] = zeichenPanel1.feld[xFeld][yFeld] - 10;
               //winCount =+ 1;
               reveal(xFeld+1, yFeld);
               reveal(xFeld-1, yFeld);
               reveal(xFeld-1,yFeld-1);
               reveal(xFeld+1,yFeld+1);
               reveal(xFeld, yFeld-1);
               reveal(xFeld, yFeld+1);
               reveal(xFeld-1,yFeld+1);
               reveal(xFeld+1,yFeld-1);
               
            }else if(zeichenPanel1.feld[xFeld][yFeld] > 10 && zeichenPanel1.feld[xFeld][yFeld] < 19){
                zeichenPanel1.feld[xFeld][yFeld] = zeichenPanel1.feld[xFeld][yFeld] - 10;
                //winCount =+1;
            }
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for(int i = 0; i<20; i++) {
            for(int j=0; j<20; j++) {
                zeichenPanel1.feld[i][j] = 0;
            }
        }
        firstClick = 0;        // TODO add your handling code here:
        zeichenPanel1.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void mineCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mineCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mineCountActionPerformed
        

    /*private void drawLine(int x1, int y1, int x2, int y2){
        float dy = y2-y1;
        float dx = x2-x1;

        float M = Math.max(Math.abs(dx),Math.abs(dy));

        float DX = dx/M;
        float DY = dy/M;

        float x;
        float y;

        for (int i = 0; i <= M; i++) {
            x = x1 + i*DX;
            y = y1 + i*DY;
            //zeichenPanel1.feld[Math.round(x)][Math.round(y)] = Color.black;
        }
    }*/
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(zeichenFormular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(zeichenFormular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(zeichenFormular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(zeichenFormular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new zeichenFormular().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bombsLeftCount;
    private javax.swing.JLabel bombsLeftLabel;
    private javax.swing.JButton endeButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField mineCount;
    private javax.swing.JLabel mineCountLabel;
    private javax.swing.JProgressBar progressBar;
    private static javax.swing.JLabel timerCountLabel;
    private javax.swing.JLabel timerLabel;
    private zeichenPanel zeichenPanel1;
    // End of variables declaration//GEN-END:variables

}
